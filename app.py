import streamlit as st
import pandas as pd
import base64
import os
import time

st.set_page_config(page_title="T·ªï B·∫£o D∆∞·ª°ng S·ªë 1", layout="wide")

# ====== C·∫§U H√åNH VIDEO ======
VIDEO_PATH = "airplane.mp4"
VIDEO_DURATION_SEC = 9  # video ~8s, d√πng 9s l√†m an to√†n

# ====== HI·ªÜN VIDEO (INTRO) ======
if "show_main" not in st.session_state:
    st.session_state.show_main = False

if not st.session_state.show_main:
    # N·∫øu file video t·ªìn t·∫°i -> hi·ªÉn th·ªã b·∫±ng th·∫ª <video> (base64) ƒë·ªÉ autoplay muted
    if os.path.exists(VIDEO_PATH):
        with open(VIDEO_PATH, "rb") as f:
            video_b64 = base64.b64encode(f.read()).decode("utf-8")
        st.markdown(f"""
        <style>
        html, body, [data-testid="stAppViewContainer"] {{
            margin:0; padding:0; overflow:hidden; background:black;
        }}
        #intro-wrap {{
            position: fixed;
            inset: 0;
            z-index: 9999;
            display:flex;
            align-items:center;
            justify-content:center;
            background:black;
        }}
        video#introVideo {{
            width:100%;
            height:100%;
            object-fit: contain; /* show full plane on any device */
            background:black;
        }}
        .intro-text {{
            position: absolute;
            bottom: 12vh;
            width:100%;
            text-align:center;
            font-family: 'Special Elite', cursive;
            font-size: 40px;
            color: #ffffff;
            text-shadow: 0 0 25px rgba(255,255,255,0.9), 0 0 40px rgba(0,200,255,0.6);
            opacity: 0;
            animation: fadeIn 2.5s ease 0.8s forwards, fadeOut 3s ease 6s forwards;
            z-index: 10001;
        }}
        @keyframes fadeIn {{
            from {{ opacity:0; transform: translateY(20px) scale(0.98); filter: blur(6px); }}
            to {{ opacity:1; transform: translateY(0) scale(1); filter: blur(0); }}
        }}
        @keyframes fadeOut {{
            from {{ opacity:1; }}
            to {{ opacity:0; transform: translateY(-20px) scale(1.02); filter: blur(8px); }}
        }}
        @keyframes hideWrap {{
            from {{ opacity:1; }}
            to {{ opacity:0; visibility:hidden; }}
        }}
        </style>

        <div id="intro-wrap">
            <video id="introVideo" autoplay muted playsinline>
                <source src="data:video/mp4;base64,{video_b64}" type="video/mp4">
            </video>
            <div class="intro-text">KH√ÅM PH√Å TH·∫æ GI·ªöI C√ôNG CH√öNG T√îI</div>
        </div>

        <script>
        const video = document.getElementById('introVideo');
        const wrap = document.getElementById('intro-wrap');
        function hideIntro() {{
            if (!wrap) return;
            wrap.style.animation = 'hideWrap 1.6s ease forwards';
            setTimeout(() => {{
                try {{ wrap.remove(); }} catch(e){{}}
                const app = document.querySelector('.stApp');
                if (app) {{
                    app.style.visibility = 'visible';
                    app.style.opacity = '0';
                    app.style.transition = 'opacity 1.6s ease';
                    setTimeout(()=> app.style.opacity = '1', 80);
                }}
            }}, 1600);
        }}

        // Khi video k·∫øt th√∫c
        video.addEventListener('ended', () => {{
            // g·ª≠i signal b·∫±ng c√°ch set location param (fallback handled in python)
            hideIntro();
        }});

        // Fallback: n·∫øu 'ended' kh√¥ng fired, t·ª± hide sau VIDEO_DURATION_SEC
        setTimeout(hideIntro, {VIDEO_DURATION_SEC * 1000});
        </script>
        """, unsafe_allow_html=True)

        # ·∫®n app ch√≠nh trong l√∫c intro ch·∫°y
        st.markdown("<style>.stApp {visibility: hidden;}</style>", unsafe_allow_html=True)

        # ƒê·ª£i m·ªôt kho·∫£ng an to√†n (ƒë·ªÉ video th·ª±c s·ª± c√≥ th·ªùi gian ch·∫°y) r·ªìi b·∫≠t trang ch√≠nh
        time.sleep(VIDEO_DURATION_SEC)
        st.session_state.show_main = True
        st.experimental_rerun()

    else:
        # n·∫øu ko c√≥ file video -> b·ªè qua intro
        st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file airplane.mp4 ‚Äî b·ªè qua intro.")
        st.session_state.show_main = True
        st.experimental_rerun()

# ====== SAU KHI INTRO: TRANG CH√çNH (VINTAGE) ======
# helper ƒë·ªçc base64 ·∫£nh
def _get_b64(file):
    with open(file, "rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")

EXCEL_FILE = "A787.xlsx"
BG_FILE = "airplane.jpg"

# vintage CSS (√°p d·ª•ng cho trang ch√≠nh)
bg_b64 = _get_b64(BG_FILE) if os.path.exists(BG_FILE) else ""
st.markdown(f"""
<style>
@import url('https://fonts.googleapis.com/css2?family=Special+Elite&display=swap');

.stApp {{
    font-family: 'Special Elite', cursive !important;
    background:
        linear-gradient(rgba(245,242,230,0.9), rgba(245,242,230,0.9)),
        url("data:image/jpeg;base64,{bg_b64}") no-repeat center center fixed;
    background-size: cover;
}}
.stApp::after {{
    content: "";
    position: fixed;
    inset: 0;
    background: url("https://www.transparenttextures.com/patterns/aged-paper.png");
    opacity: 0.35;
    pointer-events: none;
    z-index: -1;
}}
header[data-testid="stHeader"] {{display:none;}}
.block-container {{padding-top:0rem !important;}}

.top-title {{
    font-size: 34px; font-weight: bold; text-align:center;
    color:#3e2723; margin-top:15px; text-shadow:1px 1px 0 #fff;
}}
.main-title {{
    font-size: 26px; font-weight:900; text-align:center;
    color:#5d4037; margin-bottom:18px; text-shadow:1px 1px 2px rgba(255,255,255,0.8);
}}

/* TABLE vintage */
@keyframes fadeInTable {{
    from {{ opacity:0; transform: scale(0.98) rotate(-0.4deg); filter: blur(4px); }}
    to {{ opacity:1; transform: scale(1) rotate(0); filter: blur(0); }}
}}
table.dataframe {{
    width:100%; border-collapse:collapse;
    border:2px solid #5d4037; background:#fbf7ed; color:#3e2723 !important;
    font-size:15px; text-align:center; animation:fadeInTable .7s ease;
}}
table.dataframe thead th {{
    background: linear-gradient(180deg,#8d6e63,#5d4037);
    color:#fff8e1 !important; font-weight:bold; padding:10px !important;
    border:1.5px solid #3e2723 !important; text-transform:uppercase;
}}
table.dataframe tbody td {{
    padding:8px !important; border:1px dashed #6d4c41 !important;
}}
table.dataframe tbody tr:nth-child(even) td {{ background:#f3e9d2 !important; }}
table.dataframe tbody tr:hover td {{ background:#f1d9b5 !important; transition: all .25s ease; }}

.highlight-msg {{
    font-size:18px; font-weight:bold; color:#3e2723; background:#efebe9;
    padding:10px 15px; border-left:6px solid #6d4c41; border-radius:6px;
    margin:15px 0; display:flex; align-items:center; justify-content:center;
}}
</style>
""", unsafe_allow_html=True)

# ====== Load Excel existence check ======
if not os.path.exists(EXCEL_FILE):
    st.error(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file {EXCEL_FILE} trong th∆∞ m·ª•c. Vui l√≤ng ki·ªÉm tra.")
else:
    # helper load & clean
    def load_and_clean(sheet_name):
        df = pd.read_excel(EXCEL_FILE, sheet_name=sheet_name, dtype=object)
        # chu·∫©n h√≥a header
        df.columns = df.columns.str.strip()
        # gi·ªØ nguy√™n t√™n c·ªôt g·ªëc nh∆∞ng d√πng b·∫£n upper khi so s√°nh
        # thay th·∫ø √¥ ch·ªâ c√≥ space th√†nh NaN
        df = df.replace(r'^\s*$', pd.NA, regex=True)
        # lo·∫°i b·ªè ho√†n to√†n h√†ng r·ªóng
        df = df.dropna(how="all").reset_index(drop=True)
        # trim string values
        for c in df.columns:
            if df[c].dtype == object:
                df[c] = df[c].where(df[c].notna(), None)
                df[c] = df[c].apply(lambda x: x.strip() if isinstance(x, str) else x)
        return df

    st.markdown('<div class="top-title">üìú T·ªï b·∫£o d∆∞·ª°ng s·ªë 1</div>', unsafe_allow_html=True)
    st.markdown('<div class="main-title">üîé Tra c·ª©u Part number</div>', unsafe_allow_html=True)

    xls = pd.ExcelFile(EXCEL_FILE)
    zone = st.selectbox("üìÇ B·∫°n mu·ªën tra c·ª©u zone n√†o?", xls.sheet_names)
    if zone:
        df_all = load_and_clean(zone)

        # --- CH·ªåN A/C n·∫øu c√≥ ---
        ac_col = next((c for c in df_all.columns if c.strip().upper() == "A/C"), None)
        if ac_col:
            ac_choices = sorted([str(x) for x in df_all[ac_col].dropna().unique()])
            aircraft = st.selectbox("‚úàÔ∏è Lo·∫°i m√°y bay?", ac_choices)
            df_filtered = df_all[df_all[ac_col] == aircraft].copy()
        else:
            aircraft = None
            df_filtered = df_all.copy()

        # --- CH·ªåN DESCRIPTION n·∫øu c√≥ ---
        desc_col = next((c for c in df_filtered.columns if c.strip().upper() == "DESCRIPTION"), None)
        if desc_col:
            desc_choices = sorted([str(x) for x in df_filtered[desc_col].dropna().unique()])
            description = st.selectbox("üìë B·∫°n mu·ªën tra c·ª©u ph·∫ßn n√†o?", desc_choices)
            df_filtered = df_filtered[df_filtered[desc_col] == description].copy()
        else:
            description = None

        # --- CH·ªåN ITEM n·∫øu c√≥ ---
        item_col = next((c for c in df_filtered.columns if c.strip().upper() == "ITEM"), None)
        if item_col:
            item_choices = sorted([str(x) for x in df_filtered[item_col].dropna().unique()])
            if len(item_choices) > 1:
                item = st.selectbox("üî¢ B·∫°n mu·ªën tra c·ª©u Item n√†o?", item_choices)
                df_filtered = df_filtered[df_filtered[item_col] == item].copy()
        # else: nothing

        # ===== T·∫†O df_result v√† ch·ªçn c·ªôt ƒë·ªÉ hi·ªÉn th·ªã, gi·ªØ nguy√™n A/C v√† ITEM n·∫øu c√≥ =====
        if df_filtered.empty:
            st.warning("üìå R·∫•t ti·∫øc, kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p.")
        else:
            # gi·ªØ nguy√™n th·ª© t·ª± c·ªôt mong mu·ªën
            cols = []

            # lu√¥n ∆∞u ti√™n hi·ªÉn th·ªã c·ªôt A/C n·∫øu c√≥ trong file
            if ac_col and ac_col in df_filtered.columns:
                cols.append(ac_col)

            # gi·ªØ ITEM n·∫øu c√≥
            if item_col and item_col in df_filtered.columns:
                cols.append(item_col)

            # t√¨m c·ªôt PART NUMBER (∆∞u ti√™n t√™n r√µ r√†ng)
            pn_col = None
            for c in df_filtered.columns:
                cu = c.strip().upper()
                if "PART NUMBER" in cu or ("PART" in cu and "NUMBER" in cu):
                    pn_col = c
                    break
            if not pn_col:
                # t√¨m t√™n c√≥ PN
                for c in df_filtered.columns:
                    cu = c.strip().upper()
                    if cu == "PN" or "(PN)" in cu or cu.endswith(" PN"):
                        pn_col = c
                        break
            if not pn_col:
                # fallback: t√¨m c·ªôt ch·ª©a "PART"
                for c in df_filtered.columns:
                    if "PART" in c.strip().upper():
                        pn_col = c
                        break
            if not pn_col:
                # fallback: l·∫•y c·ªôt ƒë·∫ßu ti√™n c√≥ ch·ªØ 'NUMBER' ho·∫∑c n·∫øu kh√¥ng, c·ªôt ƒë·∫ßu ti√™n (kh√¥ng ch√®n A/C or ITEM again)
                for c in df_filtered.columns:
                    if "NUMBER" in c.strip().upper():
                        pn_col = c
                        break
            if not pn_col:
                # take first column that's not A/C or ITEM
                for c in df_filtered.columns:
                    if c not in [ac_col, item_col]:
                        pn_col = c
                        break

            if pn_col and pn_col not in cols:
                cols.append(pn_col)

            # t√¨m c·ªôt interchange n·∫øu c√≥
            inter_col = None
            for c in df_filtered.columns:
                if "INTERCHANGE" in c.strip().upper():
                    inter_col = c
                    break
            if inter_col and inter_col not in cols:
                cols.append(inter_col)

            # NOTE
            note_col = next((c for c in df_filtered.columns if c.strip().upper() == "NOTE"), None)
            if note_col and note_col not in cols:
                cols.append(note_col)

            # cu·ªëi c√πng: n·∫øu v·∫´n c√≤n c·ªôt d·ªØ li·ªáu quan tr·ªçng thi·∫øu (v√≠ d·ª• MODEL / DESCRIPTION), b·∫°n c√≥ th·ªÉ th√™m
            # nh∆∞ng ƒë·ªÉ nguy√™n hi·ªán t·∫°i

            # ƒë·∫£m b·∫£o c·ªôt t·ªìn t·∫°i
            cols = [c for c in cols if c and c in df_filtered.columns]

            # chu·∫©n h√≥a: thay c√°c chu·ªói r·ªóng ho·∫∑c ch·ªâ space b·∫±ng NA, sau ƒë√≥ drop rows all NA
            df_work = df_filtered.copy()
            df_work = df_work.replace(r'^\s*$', pd.NA, regex=True)
            df_work = df_work.dropna(how="all").reset_index(drop=True)

            # n·∫øu c√≥ √≠t nh·∫•t 1 c·ªôt trong cols th√¨ ch·ªçn, ng∆∞·ª£c l·∫°i hi·ªÉn th·ªã to√†n b·ªô df_work
            if cols:
                df_result = df_work[cols].copy()
            else:
                df_result = df_work.copy()

            # lo·∫°i b·ªè h√†ng r·ªóng (d·ª±a tr√™n df_result)
            df_result = df_result.replace(r'^\s*$', pd.NA, regex=True).dropna(how="all").reset_index(drop=True)

            # ch√®n STT
            if not df_result.empty:
                df_result.insert(0, "STT", range(1, len(df_result)+1))
                # hi·ªÉn th·ªã table (HTML) ƒë·ªÉ CSS table.dataframe √°p d·ª•ng
                st.markdown(f'<div class="highlight-msg">‚úÖ T√¨m th·∫•y {len(df_result)} d√≤ng d·ªØ li·ªáu</div>', unsafe_allow_html=True)
                st.write(df_result.to_html(escape=False, index=False), unsafe_allow_html=True)
            else:
                st.warning("üìå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p sau khi l·ªçc (c√°c h√†ng r·ªóng ƒë√£ b·ªã lo·∫°i).")
